=begin comment

Direct Freight API

In order to use the Direct Freight API please first contact us to get an API Token. This token needs to be sent as a HTTP header argument in every request to our API.  api-token=\"SECRET KEY\"  Please keep your api-token a secret. If the token is compromised please contact us to get a new one.  This api token authenticates your application and gives it access to the API.  The API token should not be confused with the end-user-token. That token is given to you via the end_user_authentications endpoint when the user logs in. This token is needed in order to use certain features, and get certain sensitive information.  Both Tokens are stateless, and delivered via the HTTP headers.

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::AlertsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# alerts_alert_type_delete
#
# Delete an alert.
# 
# @param string $alert_type Valid types are \&quot;loads\&quot;, and \&quot;trucks\&quot;. (required)
# @param string $end_user_token  (required)
# @param ARRAY[string] $alert_id Specify to just delete some alerts. (required)
{
    my $params = {
    'alert_type' => {
        data_type => 'string',
        description => 'Valid types are \&quot;loads\&quot;, and \&quot;trucks\&quot;.',
        required => '1',
    },
    'end_user_token' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'alert_id' => {
        data_type => 'ARRAY[string]',
        description => 'Specify to just delete some alerts.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'alerts_alert_type_delete' } = { 
    	summary => 'Delete an alert.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub alerts_alert_type_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'alert_type' is set
    unless (exists $args{'alert_type'}) {
      croak("Missing the required parameter 'alert_type' when calling alerts_alert_type_delete");
    }

    # verify the required parameter 'end_user_token' is set
    unless (exists $args{'end_user_token'}) {
      croak("Missing the required parameter 'end_user_token' when calling alerts_alert_type_delete");
    }

    # verify the required parameter 'alert_id' is set
    unless (exists $args{'alert_id'}) {
      croak("Missing the required parameter 'alert_id' when calling alerts_alert_type_delete");
    }

    # parse inputs
    my $_resource_path = '/alerts/{alert_type}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'alert_id'}) {
        $query_params->{'alert_id'} = $self->{api_client}->to_query_value($args{'alert_id'});
    }

    # header params
    if ( exists $args{'end_user_token'}) {
        $header_params->{'end-user-token'} = $self->{api_client}->to_header_value($args{'end_user_token'});
    }

    # path params
    if ( exists $args{'alert_type'}) {
        my $_base_variable = "{" . "alert_type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'alert_type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(api_key )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# alerts_alert_type_get
#
# Get a list of alerts.
# 
# @param string $alert_type Valid types are \&quot;loads\&quot;, and \&quot;trucks\&quot;. (required)
# @param string $end_user_token  (required)
# @param ARRAY[UUID] $alert_id only get a subset of alerts. As this is a get request this is specified as a query string parameter. (optional)
{
    my $params = {
    'alert_type' => {
        data_type => 'string',
        description => 'Valid types are \&quot;loads\&quot;, and \&quot;trucks\&quot;.',
        required => '1',
    },
    'end_user_token' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'alert_id' => {
        data_type => 'ARRAY[UUID]',
        description => 'only get a subset of alerts. As this is a get request this is specified as a query string parameter.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'alerts_alert_type_get' } = { 
    	summary => 'Get a list of alerts.',
        params => $params,
        returns => 'GetAlertResponse',
        };
}
# @return GetAlertResponse
#
sub alerts_alert_type_get {
    my ($self, %args) = @_;

    # verify the required parameter 'alert_type' is set
    unless (exists $args{'alert_type'}) {
      croak("Missing the required parameter 'alert_type' when calling alerts_alert_type_get");
    }

    # verify the required parameter 'end_user_token' is set
    unless (exists $args{'end_user_token'}) {
      croak("Missing the required parameter 'end_user_token' when calling alerts_alert_type_get");
    }

    # parse inputs
    my $_resource_path = '/alerts/{alert_type}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'alert_id'}) {
        $query_params->{'alert_id'} = $self->{api_client}->to_query_value($args{'alert_id'});
    }

    # header params
    if ( exists $args{'end_user_token'}) {
        $header_params->{'end-user-token'} = $self->{api_client}->to_header_value($args{'end_user_token'});
    }

    # path params
    if ( exists $args{'alert_type'}) {
        my $_base_variable = "{" . "alert_type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'alert_type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(api_key )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetAlertResponse', $response);
    return $_response_object;
}

#
# alerts_alert_type_patch
#
# Update an alert.
# 
# @param string $alert_type Valid types are \&quot;loads\&quot;, and \&quot;trucks\&quot;. (required)
# @param string $end_user_token  (required)
# @param string $alert_id Specify which alert you are updating. (required)
# @param PatchAlertProperties $body  (optional)
{
    my $params = {
    'alert_type' => {
        data_type => 'string',
        description => 'Valid types are \&quot;loads\&quot;, and \&quot;trucks\&quot;.',
        required => '1',
    },
    'end_user_token' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'alert_id' => {
        data_type => 'string',
        description => 'Specify which alert you are updating.',
        required => '1',
    },
    'body' => {
        data_type => 'PatchAlertProperties',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'alerts_alert_type_patch' } = { 
    	summary => 'Update an alert.',
        params => $params,
        returns => 'PatchAlertResponse',
        };
}
# @return PatchAlertResponse
#
sub alerts_alert_type_patch {
    my ($self, %args) = @_;

    # verify the required parameter 'alert_type' is set
    unless (exists $args{'alert_type'}) {
      croak("Missing the required parameter 'alert_type' when calling alerts_alert_type_patch");
    }

    # verify the required parameter 'end_user_token' is set
    unless (exists $args{'end_user_token'}) {
      croak("Missing the required parameter 'end_user_token' when calling alerts_alert_type_patch");
    }

    # verify the required parameter 'alert_id' is set
    unless (exists $args{'alert_id'}) {
      croak("Missing the required parameter 'alert_id' when calling alerts_alert_type_patch");
    }

    # parse inputs
    my $_resource_path = '/alerts/{alert_type}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'alert_id'}) {
        $query_params->{'alert_id'} = $self->{api_client}->to_query_value($args{'alert_id'});
    }

    # header params
    if ( exists $args{'end_user_token'}) {
        $header_params->{'end-user-token'} = $self->{api_client}->to_header_value($args{'end_user_token'});
    }

    # path params
    if ( exists $args{'alert_type'}) {
        my $_base_variable = "{" . "alert_type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'alert_type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(api_key )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PatchAlertResponse', $response);
    return $_response_object;
}

#
# alerts_alert_type_post
#
# Create an alert.
# 
# @param string $alert_type Valid types are \&quot;loads\&quot;, and \&quot;trucks\&quot;. (required)
# @param string $end_user_token  (required)
# @param AlertProperties $body  (required)
{
    my $params = {
    'alert_type' => {
        data_type => 'string',
        description => 'Valid types are \&quot;loads\&quot;, and \&quot;trucks\&quot;.',
        required => '1',
    },
    'end_user_token' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'body' => {
        data_type => 'AlertProperties',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'alerts_alert_type_post' } = { 
    	summary => 'Create an alert.',
        params => $params,
        returns => 'PostAlertResponse',
        };
}
# @return PostAlertResponse
#
sub alerts_alert_type_post {
    my ($self, %args) = @_;

    # verify the required parameter 'alert_type' is set
    unless (exists $args{'alert_type'}) {
      croak("Missing the required parameter 'alert_type' when calling alerts_alert_type_post");
    }

    # verify the required parameter 'end_user_token' is set
    unless (exists $args{'end_user_token'}) {
      croak("Missing the required parameter 'end_user_token' when calling alerts_alert_type_post");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling alerts_alert_type_post");
    }

    # parse inputs
    my $_resource_path = '/alerts/{alert_type}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'end_user_token'}) {
        $header_params->{'end-user-token'} = $self->{api_client}->to_header_value($args{'end_user_token'});
    }

    # path params
    if ( exists $args{'alert_type'}) {
        my $_base_variable = "{" . "alert_type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'alert_type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(api_key )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PostAlertResponse', $response);
    return $_response_object;
}

1;
