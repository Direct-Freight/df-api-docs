=begin comment

Direct Freight API

In order to use the Direct Freight API please first contact us to get an API Token. This token needs to be sent as a HTTP header argument in every request to our API.  api-token=\"SECRET KEY\"  Please keep your api-token a secret. If the token is compromised please contact us to get a new one.  This api token authenticates your application and gives it access to the API.  The API token should not be confused with the end-user-token. That token is given to you via the end_user_authentications endpoint when the user logs in. This token is needed in order to use certain features, and get certain sensitive information.  Both Tokens are stateless, and delivered via the HTTP headers.

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::Object::SearchBoard;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use base ("Class::Accessor", "Class::Data::Inheritable");


#
#
#
# NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
# REF: https://github.com/swagger-api/swagger-codegen
#

=begin comment

Direct Freight API

In order to use the Direct Freight API please first contact us to get an API Token. This token needs to be sent as a HTTP header argument in every request to our API.  api-token=\"SECRET KEY\"  Please keep your api-token a secret. If the token is compromised please contact us to get a new one.  This api token authenticates your application and gives it access to the API.  The API token should not be confused with the end-user-token. That token is given to you via the end_user_authentications endpoint when the user logs in. This token is needed in order to use certain features, and get certain sensitive information.  Both Tokens are stateless, and delivered via the HTTP headers.

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('swagger_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new object
sub new { 
    my ($class, %args) = @_; 

	my $self = bless {}, $class;
	
	foreach my $attribute (keys %{$class->attribute_map}) {
		my $args_key = $class->attribute_map->{$attribute};
		$self->$attribute( $args{ $args_key } );
	}
	
	return $self;
}  

# return perl hash
sub to_hash {
    return decode_json(JSON->new->convert_blessed->encode( shift ));
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }
    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use swagger_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->swagger_types} ) {
    	my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[/i) { # array
            my $_subclass = substr($_type, 6, -1);
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
        	$log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);
        
    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "WWW::SwaggerClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => '',
                                  class => 'SearchBoard',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'alert_id' => {
    	datatype => 'boolean',
    	base_name => 'alert_id',
    	description => 'By specifying an alert_id we will record the loads seen by this user, and associate it with their alert. ',
    	format => '',
    	read_only => '',
    		},
    'count' => {
    	datatype => 'boolean',
    	base_name => 'count',
    	description => 'If included this will return a count instead of a list. ',
    	format => '',
    	read_only => '',
    		},
    'destination_city' => {
    	datatype => 'string',
    	base_name => 'destination_city',
    	description => 'Must be at least 2 characters. ',
    	format => '',
    	read_only => '',
    		},
    'destination_radius' => {
    	datatype => 'int',
    	base_name => 'destination_radius',
    	description => 'If both city and state, it will search for all entries within # Miles of the city. ',
    	format => '',
    	read_only => '',
    		},
    'destination_state' => {
    	datatype => 'ARRAY[string]',
    	base_name => 'destination_state',
    	description => 'If it is an array, we assume a multi state search, and ignore destination_city. ',
    	format => '',
    	read_only => '',
    		},
    'item_count' => {
    	datatype => 'int',
    	base_name => 'item_count',
    	description => 'Will default to 50 items per page. Max is 100, minimum is 1. ',
    	format => '',
    	read_only => '',
    		},
    'load_size' => {
    	datatype => 'ARRAY[string]',
    	base_name => 'load_size',
    	description => 'This is only valid on load boards. Valid values are &amp;quot;Full&amp;quot; and &amp;quot;Partial&amp;quot;. ',
    	format => '',
    	read_only => '',
    		},
    'only_new' => {
    	datatype => 'boolean',
    	base_name => 'only_new',
    	description => 'This will only return unseen results. This requires an alert_id to be specified. ',
    	format => '',
    	read_only => '',
    		},
    'origin_city' => {
    	datatype => 'string',
    	base_name => 'origin_city',
    	description => 'Must be at least 3 characters. ',
    	format => '',
    	read_only => '',
    		},
    'origin_radius' => {
    	datatype => 'int',
    	base_name => 'origin_radius',
    	description => 'If both city and state, it will search for all entries within # Miles of the city. ',
    	format => '',
    	read_only => '',
    		},
    'origin_state' => {
    	datatype => 'ARRAY[string]',
    	base_name => 'origin_state',
    	description => 'If it is an array, we assume a multi state search, and ignore origin_city. ',
    	format => '',
    	read_only => '',
    		},
    'page_number' => {
    	datatype => 'int',
    	base_name => 'page_number',
    	description => 'The page you are on. ',
    	format => '',
    	read_only => '',
    		},
    'ship_date' => {
    	datatype => 'ARRAY[string]',
    	base_name => 'ship_date',
    	description => 'Limit the board to only show loads with X ship date. ',
    	format => '',
    	read_only => '',
    		},
    'total_items' => {
    	datatype => 'int',
    	base_name => 'total_items',
    	description => 'A count of all the entry objects for the specified search. ',
    	format => '',
    	read_only => '',
    		},
    'total_pages' => {
    	datatype => 'int',
    	base_name => 'total_pages',
    	description => 'A count of the # of pages based on the search parameters. ',
    	format => '',
    	read_only => '',
    		},
    'trailer_type' => {
    	datatype => 'ARRAY[string]',
    	base_name => 'trailer_type',
    	description => 'A string array of valid trailer types to limit the search. ',
    	format => '',
    	read_only => '',
    		},
});

__PACKAGE__->swagger_types( {
    'alert_id' => 'boolean',
    'count' => 'boolean',
    'destination_city' => 'string',
    'destination_radius' => 'int',
    'destination_state' => 'ARRAY[string]',
    'item_count' => 'int',
    'load_size' => 'ARRAY[string]',
    'only_new' => 'boolean',
    'origin_city' => 'string',
    'origin_radius' => 'int',
    'origin_state' => 'ARRAY[string]',
    'page_number' => 'int',
    'ship_date' => 'ARRAY[string]',
    'total_items' => 'int',
    'total_pages' => 'int',
    'trailer_type' => 'ARRAY[string]'
} );

__PACKAGE__->attribute_map( {
    'alert_id' => 'alert_id',
    'count' => 'count',
    'destination_city' => 'destination_city',
    'destination_radius' => 'destination_radius',
    'destination_state' => 'destination_state',
    'item_count' => 'item_count',
    'load_size' => 'load_size',
    'only_new' => 'only_new',
    'origin_city' => 'origin_city',
    'origin_radius' => 'origin_radius',
    'origin_state' => 'origin_state',
    'page_number' => 'page_number',
    'ship_date' => 'ship_date',
    'total_items' => 'total_items',
    'total_pages' => 'total_pages',
    'trailer_type' => 'trailer_type'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
